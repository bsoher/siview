# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Wed Oct 18 16:06:35 2023
#

import wx

# begin wxGlade: dependencies
from wx.lib.agw.floatspin import FloatSpin, EVT_FLOATSPIN, FS_LEFT, FS_RIGHT, FS_CENTRE, FS_READONLY
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class SiviewUI(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SiviewUI.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_30, 0, wx.ALL | wx.EXPAND, 4)

        label_11 = wx.StaticText(self, wx.ID_ANY, "Source:")
        sizer_30.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)

        self.TextSource = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.TextSource.SetMinSize((-1,-1))
        sizer_30.Add(self.TextSource, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Scale: ")
        sizer_30.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 8)

        self.FloatScale = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        sizer_30.Add(self.FloatScale, 0, wx.EXPAND, 0)

        self.SplitterWindow = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.SplitterWindow.SetMinimumPaneSize(20)
        sizer_2.Add(self.SplitterWindow, 1, wx.EXPAND, 0)

        self.PaneLeft = wx.Panel(self.SplitterWindow, wx.ID_ANY)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)

        self.notebook_1 = wx.Notebook(self.PaneLeft, wx.ID_ANY, style=0)
        sizer_7.Add(self.notebook_1, 1, wx.EXPAND, 0)

        self.TabImages = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.TabImages, "Images")

        sizer_7_copy = wx.BoxSizer(wx.VERTICAL)

        self.PanelImage = wx.Panel(self.TabImages, wx.ID_ANY)
        sizer_7_copy.Add(self.PanelImage, 1, wx.EXPAND, 0)

        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.TabImages, wx.ID_ANY, "Image Controls"), wx.VERTICAL)
        sizer_7_copy.Add(sizer_4, 0, wx.EXPAND, 0)

        grid_sizer_1 = wx.FlexGridSizer(2, 2, 2, 2)
        sizer_4.Add(grid_sizer_1, 0, wx.EXPAND, 0)

        self.LabelTop = wx.StaticText(self.TabImages, wx.ID_ANY, "MRI Slice Index")
        grid_sizer_1.Add(self.LabelTop, 0, 0, 0)

        self.SliderTop = wx.Slider(self.TabImages, wx.ID_ANY, 0, 0, 10)
        grid_sizer_1.Add(self.SliderTop, 1, wx.EXPAND, 0)

        self.LabelBottom = wx.StaticText(self.TabImages, wx.ID_ANY, "Calculated Images : ")
        grid_sizer_1.Add(self.LabelBottom, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.ChoiceResults = wx.Choice(self.TabImages, wx.ID_ANY, choices=["Integral", "First Point"])
        self.ChoiceResults.SetSelection(0)
        grid_sizer_1.Add(self.ChoiceResults, 0, wx.EXPAND, 0)

        grid_sizer_3 = wx.FlexGridSizer(2, 5, 4, 4)
        sizer_4.Add(grid_sizer_3, 1, wx.ALL | wx.EXPAND, 6)

        self.label_18 = wx.StaticText(self.TabImages, wx.ID_ANY, "Calc - Floor: ")
        grid_sizer_3.Add(self.label_18, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.SpinCalcFloor = wx.SpinCtrl(self.TabImages, wx.ID_ANY, "", min=0, max=100, style=0)
        grid_sizer_3.Add(self.SpinCalcFloor, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_19 = wx.StaticText(self.TabImages, wx.ID_ANY, "    Ceil: ")
        grid_sizer_3.Add(label_19, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.SpinCalcCeil = wx.SpinCtrl(self.TabImages, wx.ID_ANY, "", min=0, max=100, style=0)
        grid_sizer_3.Add(self.SpinCalcCeil, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.ButtonCalcReset = wx.Button(self.TabImages, wx.ID_ANY, "Reset", style=wx.BU_EXACTFIT)
        grid_sizer_3.Add(self.ButtonCalcReset, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.label_20 = wx.StaticText(self.TabImages, wx.ID_ANY, "MRI - Floor: ")
        grid_sizer_3.Add(self.label_20, 0, wx.ALIGN_RIGHT, 0)

        self.SpinMriFloor = wx.SpinCtrl(self.TabImages, wx.ID_ANY, "", min=0, max=100, style=0)
        grid_sizer_3.Add(self.SpinMriFloor, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_19_copy = wx.StaticText(self.TabImages, wx.ID_ANY, "    Ceil: ")
        grid_sizer_3.Add(label_19_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.SpinMriCeil = wx.SpinCtrl(self.TabImages, wx.ID_ANY, "", min=0, max=100, style=0)
        grid_sizer_3.Add(self.SpinMriCeil, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.ButtonMriReset = wx.Button(self.TabImages, wx.ID_ANY, "Reset", style=wx.BU_EXACTFIT)
        grid_sizer_3.Add(self.ButtonMriReset, 0, 0, 0)

        self.TabSettings = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.TabSettings, "Settings")

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        self.panel_2 = wx.Panel(self.TabSettings, wx.ID_ANY)
        sizer_5.Add(self.panel_2, 1, wx.EXPAND, 0)

        sizer_8 = wx.BoxSizer(wx.VERTICAL)

        sizer_9 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, "Model"), wx.HORIZONTAL)
        sizer_8.Add(sizer_9, 0, wx.ALL | wx.EXPAND, 4)

        self.label_13 = wx.StaticText(self.panel_2, wx.ID_ANY, "Model : ")
        sizer_9.Add(self.label_13, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.TOP, 2)

        self.ChoiceModel = wx.Choice(self.panel_2, wx.ID_ANY, choices=["Model 1", "Model 2"])
        self.ChoiceModel.SetSelection(0)
        sizer_9.Add(self.ChoiceModel, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_8.Add((0, 0), 0, 0, 0)

        sizer_8.Add((0, 0), 0, 0, 0)

        sizer_8.Add((0, 0), 0, 0, 0)

        sizer_8.Add((0, 0), 0, 0, 0)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 6)

        sizer_3.Add((0, 0), 0, 0, 0)

        self.ButtonFitAll = wx.Button(self.PaneLeft, wx.ID_ANY, "Fit All Voxels")
        sizer_3.Add(self.ButtonFitAll, 0, wx.EXPAND, 0)

        sizer_3.Add((0, 0), 0, 0, 0)

        sizer_3.Add((0, 0), 0, 0, 0)

        self.PaneRight = wx.Panel(self.SplitterWindow, wx.ID_ANY)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)

        self.PanelPlot = wx.Panel(self.PaneRight, wx.ID_ANY)
        sizer_6.Add(self.PanelPlot, 1, wx.EXPAND, 0)

        self.PaneRight.SetSizer(sizer_6)

        self.panel_2.SetSizer(sizer_8)

        self.TabSettings.SetSizer(sizer_5)

        grid_sizer_1.AddGrowableCol(1)

        self.TabImages.SetSizer(sizer_7_copy)

        self.PaneLeft.SetSizer(sizer_7)

        self.SplitterWindow.SplitVertically(self.PaneLeft, self.PaneRight)

        self.SetSizer(sizer_2)

        self.Layout()

        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.on_splitter, self.SplitterWindow)
        self.Bind(wx.EVT_CHOICE, self.on_results, self.ChoiceResults)
        self.Bind(wx.EVT_SPINCTRL, self.on_map_range, self.SpinCalcFloor)
        self.Bind(wx.EVT_SPINCTRL, self.on_map_range, self.SpinCalcCeil)
        self.Bind(wx.EVT_BUTTON, self.on_map_reset, self.ButtonCalcReset)
        self.Bind(wx.EVT_SPINCTRL, self.on_time_range, self.SpinMriFloor)
        self.Bind(wx.EVT_SPINCTRL, self.on_time_range, self.SpinMriCeil)
        self.Bind(wx.EVT_BUTTON, self.on_time_reset, self.ButtonMriReset)
        self.Bind(wx.EVT_CHOICE, self.on_time_course_model, self.ChoiceModel)
        self.Bind(wx.EVT_BUTTON, self.on_fit_all, self.ButtonFitAll)
        # end wxGlade

    def on_splitter(self, event):  # wxGlade: SiviewUI.<event_handler>
        print("Event handler 'on_splitter' not implemented!")
        event.Skip()

    def on_results(self, event):  # wxGlade: SiviewUI.<event_handler>
        print("Event handler 'on_results' not implemented!")
        event.Skip()

    def on_map_range(self, event):  # wxGlade: SiviewUI.<event_handler>
        print("Event handler 'on_map_range' not implemented!")
        event.Skip()

    def on_map_reset(self, event):  # wxGlade: SiviewUI.<event_handler>
        print("Event handler 'on_map_reset' not implemented!")
        event.Skip()

    def on_time_range(self, event):  # wxGlade: SiviewUI.<event_handler>
        print("Event handler 'on_time_range' not implemented!")
        event.Skip()

    def on_time_reset(self, event):  # wxGlade: SiviewUI.<event_handler>
        print("Event handler 'on_time_reset' not implemented!")
        event.Skip()

    def on_time_course_model(self, event):  # wxGlade: SiviewUI.<event_handler>
        print("Event handler 'on_time_course_model' not implemented!")
        event.Skip()

    def on_fit_all(self, event):  # wxGlade: SiviewUI.<event_handler>
        print("Event handler 'on_fit_all' not implemented!")
        event.Skip()

# end of class SiviewUI

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 1000))
        self.SetTitle("frame_1")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.SiviewUI = SiviewUI(self, wx.ID_ANY)
        sizer_1.Add(self.SiviewUI, 1, wx.EXPAND, 0)

        self.SetSizer(sizer_1)

        self.Layout()
        # end wxGlade

# end of class MyFrame
